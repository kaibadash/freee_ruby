# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/httparty/all/httparty.rbi
#
# httparty-0.20.0

module HTTParty
end
module HTTParty::ModuleInheritableAttributes
  def self.hash_deep_dup(hash); end
  def self.included(base); end
end
module HTTParty::ModuleInheritableAttributes::ClassMethods
  def inherited(subclass); end
  def mattr_inheritable(*args); end
end
class HTTParty::CookieHash < Hash
  def add_cookies(data); end
  def to_cookie_string; end
end
module Net
end
module Net::HTTPHeader
  def digest_auth(username, password, response); end
end
class Net::HTTPHeader::DigestAuthenticator
  def a1; end
  def a2; end
  def algorithm_present?; end
  def authorization_header; end
  def cookie_header; end
  def initialize(username, password, method, path, response_header); end
  def md5(str); end
  def opaque_present?; end
  def parse(response_header); end
  def parse_cookies(response_header); end
  def qop_present?; end
  def random; end
  def request_digest; end
  def use_md5_sess?; end
end
class HTTParty::ConnectionAdapter
  def add_max_retries?(max_retries); end
  def add_timeout?(timeout); end
  def attach_ssl_certificates(http, options); end
  def clean_host(host); end
  def connection; end
  def from_ruby_version(ruby_version, option: nil, warn: nil); end
  def initialize(uri, options = nil); end
  def options; end
  def self.call(uri, options); end
  def self.default_cert_store; end
  def ssl_implied?(uri); end
  def strip_ipv6_brackets(host); end
  def uri; end
  def verify_ssl_certificate?; end
end
module HTTParty::Logger
  def self.add_formatter(name, formatter); end
  def self.build(logger, level, formatter); end
  def self.formatters; end
end
class HTTParty::Logger::ApacheFormatter
  def content_length; end
  def current_time; end
  def format(request, response); end
  def http_method; end
  def initialize(logger, level); end
  def level; end
  def level=(arg0); end
  def logger; end
  def logger=(arg0); end
  def message; end
  def path; end
  def request; end
  def response; end
end
class HTTParty::Logger::CurlFormatter
  def current_time; end
  def format(request, response); end
  def initialize(logger, level); end
  def level; end
  def level=(arg0); end
  def log(direction, line = nil); end
  def log_hash(hash); end
  def log_headers; end
  def log_query; end
  def log_request; end
  def log_response; end
  def log_response_headers; end
  def log_url; end
  def logger; end
  def logger=(arg0); end
  def messages; end
  def messages=(arg0); end
  def request; end
  def response; end
end
class HTTParty::Logger::LogstashFormatter
  def content_length; end
  def current_time; end
  def format(request, response); end
  def http_method; end
  def initialize(logger, level); end
  def level; end
  def level=(arg0); end
  def logger; end
  def logger=(arg0); end
  def logstash_message; end
  def message; end
  def path; end
  def request; end
  def response; end
end
module SecureRandom
end
